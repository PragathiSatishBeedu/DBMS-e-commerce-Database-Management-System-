
--Topic: E-Commerce Database

--Project DDL

--Drop statements to clean up objects from previous run


--Drop Triggers
DROP TRIGGER TR_CUST;
DROP TRIGGER TR_VENDOR;
DROP TRIGGER TR_PROD;
DROP TRIGGER TR_ORDER_ID;
DROP TRIGGER TR_ORDER_DATE;
DROP TRIGGER TR_PAYMENT_ID;
DROP TRIGGER TR_PAYMENT_DATE;

--Drop Sequences
DROP SEQUENCE Seq_Cust_ID;
DROP SEQUENCE Seq_Vendor_ID;
DROP SEQUENCE Seq_Prod_ID;
DROP SEQUENCE Seq_Order_ID;
DROP SEQUENCE Seq_Order_Date;
DROP SEQUENCE Seq_Payment_ID;
DROP SEQUENCE Seq_Payment_Date;

--Drop Views
DROP VIEW CUST_INFO;
DROP VIEW PURCHASE_ORDER_INFO;

--Drop Indices
DROP INDEX IDX_CUST_FIRST_NAME;
DROP INDEX IDX_VENDOR_NAME;
DROP INDEX IDX_PRODUCT_NAME;

--Drop Tables
DROP TABLE CUSTOMER;
DROP TABLE VENDOR;
DROP TABLE PRODUCT;
DROP TABLE PURCHASE_ORDER;
DROP TABLE PAYMENT;


--Creating tables based on entities
--Creating Table Customer
CREATE TABLE CUSTOMER
(
    CUST_ID INTEGER PRIMARY KEY,
    CUST_FIRST_NAME VARCHAR(20),
    CUST_LAST_NAME VARCHAR(20),
    CUST_PHNUM INTEGER,
    CUST_ZIP INTEGER
)

--Creating Table Vendor
CREATE TABLE VENDOR
(
    VENDOR_ID INTEGER PRIMARY KEY,
    VENDOR_PHNUM INTEGER,
    VENDOR_NAME VARCHAR(20),
    VENDOR_ZIP INTEGER,
    VENDOR_PRODUCT VARCHAR(50)
)

--Creating Table Product
CREATE TABLE PRODUCT
(
    PRODUCT_ID INTEGER PRIMARY KEY,
    PRODUCT_NAME VARCHAR(20),
    PRODUCT_PRICE INTEGER,
    PRODUCT_WEIGHT INTEGER,
    PRODUCT_STOCK INTEGER,
    VENDOR_ID INTEGER,
    CONSTRAINT FK_VENDOR_ID FOREIGN KEY(VENDOR_ID) REFERENCES VENDOR (VENDOR_ID)
)

--Creating Table Purchase Order
CREATE TABLE PURCHASE_ORDER
(
    ORDER_ID INTEGER PRIMARY KEY,
    ORDER_DATE DATE,
    ORDER_QUANTITY INTEGER,
    CUST_ID INTEGER,
    PRODUCT_ID INTEGER,
    CONSTRAINT FK_CUST_ID FOREIGN KEY (CUST_ID) REFERENCES CUSTOMER(CUST_ID),
    CONSTRAINT FK_PRODUCT_ID FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID) 
)

--Creating Table Payment
CREATE TABLE PAYMENT
(
    PAYMENT_ID INTEGER PRIMARY KEY,
    ORDER_ID INTEGER,
    PAYMENT_TYPE VARCHAR(20),
    PAYMENT_DATE DATE,
    PAYMENT_AMT INTEGER,
    FOREIGN KEY (ORDER_ID) REFERENCES PURCHASE_ORDER(ORDER_ID)
)


--Creating indices for natural keys, foreign keys and frequently used columns
CREATE INDEX IDX_CUST_FIRST_NAME ON CUSTOMER (CUST_FIRST_NAME);
CREATE INDEX IDX_VENDOR_NAME ON VENDOR (VENDOR_NAME);
CREATE INDEX IDX_PRODUCT_NAME ON PRODUCT (PRODUCT_NAME);


--Creating Views
--Creating View to display all Customer Information
CREATE OR REPLACE VIEW CUST_INFO AS
SELECT * FROM CUSTOMER;

--Creating View to display all Purchase Order Information
CREATE OR REPLACE VIEW PURCHASE_ORDER_INFO AS 
SELECT * FROM PURCHASE_ORDER;

--Creating Sequences
--Creating Sequence for Customer_ID
CREATE SEQUENCE Seq_Cust_ID
START WITH 1
INCREMENT BY 1
MINVALUE 1
NOMAXVALUE;

--Creating Sequence for Vendor_ID
CREATE SEQUENCE Seq_Vendor_ID
START WITH 10
INCREMENT BY 10
MINVALUE 10
NOMAXVALUE;

--Creating Sequence for Product_ID
CREATE SEQUENCE Seq_Prod_ID
START WITH 100
INCREMENT BY 100
MINVALUE 100
NOMAXVALUE;

--Creating Sequence for Order_ID
CREATE SEQUENCE Seq_Order_ID
START WITH 100
INCREMENT BY 100
MINVALUE 100
NOMAXVALUE;

--Creating Sequence for Order_Date
CREATE SEQUENCE Seq_Order_Date START WITH 1;

--Creating Sequence for Payment_ID
CREATE SEQUENCE Seq_Payment_ID
START WITH 10
INCREMENT BY 10
MINVALUE 10
NOMAXVALUE;

--Creating Sequence for Payment_Date
CREATE SEQUENCE Seq_Payment_Date START WITH 1;


--Creating Triggers
--Creating Trigger for CustomerID 
CREATE OR REPLACE TRIGGER TR_CUST
BEFORE INSERT OR UPDATE ON CUSTOMER
FOR EACH ROW
BEGIN
:NEW.CUST_ID :=SEQ_Cust_ID.nextval;
END ;

--Creating trigger for Vendor_ID
CREATE OR REPLACE TRIGGER TR_VENDOR
BEFORE INSERT OR UPDATE ON VENDOR
FOR EACH ROW
BEGIN
:NEW.VENDOR_ID :=Seq_Vendor_ID.nextval;
END ;

--Creating trigger for Product_ID
CREATE OR REPLACE TRIGGER TR_PROD
BEFORE INSERT OR UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
:NEW.PRODUCT_ID :=SEQ_Prod_ID.nextval;
END ;

--Creating trigger for Order_ID
CREATE OR REPLACE TRIGGER TR_ORDER_ID
BEFORE INSERT OR UPDATE ON PURCHASE_ORDER
FOR EACH ROW
BEGIN
:NEW.ORDER_ID :=Seq_Order_ID.nextval;
END;

--Creating trigger for Order_Date
CREATE OR REPLACE TRIGGER TR_ORDER_DATE
BEFORE INSERT OR UPDATE ON PURCHASE_ORDER
FOR EACH ROW
BEGIN
  :NEW.ORDER_ID := Seq_Order_Date.NEXTVAL;
  :NEW.ORDER_DATE := SYSDATE;
END;

--Creating trigger for Payment_ID
CREATE OR REPLACE TRIGGER TR_PAYMENT_ID
BEFORE INSERT OR UPDATE ON PAYMENT
FOR EACH ROW
BEGIN
:NEW.PAYMENT_ID :=Seq_Payment_ID.nextval;
END;

--Creating trigger for Payment_Date
CREATE OR REPLACE TRIGGER TR_PAYMENT_DATE
BEFORE INSERT OR UPDATE ON PAYMENT
FOR EACH ROW
BEGIN
  :NEW.PAYMENT_ID := Seq_Payment_Date.NEXTVAL;
  :NEW.PAYMENT_DATE := SYSDATE;
END;


COMMIT;


